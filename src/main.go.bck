package main

import (
	"encoding/json"
	"net/http"
	// "math/rand"
	// "strconv"
	"log"
	"os"
	"time"

	"github.com/gorilla/mux"
	"github.com/elastic/go-elasticsearch/client"
)

// // Book struct (Model)
// type Book struct {
// 	ID				string	`json:"id"`
// 	Isbn			string	`json:"isbn"`
// 	Title			string	`json:"title"`
// 	Author		*Author	`json:"author"`
// }
// 
// type Author struct {
// 	Firstname	string	`json:"firstname"`
// 	Lastname		string	`json:"lastname"`
// }

// var books []Book


type Book struct {
	db		string	`json`
	// db *gorm.DB
}

// Get All Books
func (books *Book) getBooks(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(books)
}

// Get a Book
func (books *Book) getBook(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r) //Get params
	for _, item := range books {
		if item.ID == params["id"] {
			json.NewEncoder(w).Encode(item)
			// return
		}
	}
	// json.NewEncoder(w).Encode(&Book{})
}

func Metrics(l *log.Logger, next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		began := time.Now()
		next.ServeHTTP(w,r)
		l.Printf("%s %s took %s", r.Method, r.URL, time.Since(began))
	})
}

func main() {
	// // Mock Data - @todo - implement
	// var books []Book
	// books = append(books, Book{ID: "1", Isbn: "3445343", Title: "Book One", Author: &Author{Firstname: "John", Lastname: "Doe"}})
   // books = append(books, Book{ID: "2", Isbn: "4655343", Title: "Book Two", Author: &Author{Firstname: "John", Lastname: "Doe"}})
   // db, err = append(books, Book{ID: "1", Isbn: "3445343", Title: "Book One", Author: &Author{Firstname: "John", Lastname: "Doe"}})
   // db, err = append(books, Book{ID: "2", Isbn: "4655343", Title: "Book Two", Author: &Author{Firstname: "John", Lastname: "Doe"}})
	// if err != nil {
	// 	log.Fatal(err)
	// }

	books := &Book{db: connect()}
   // Create logger
	logger := log.New(os.Stdout, "", 0)

	// Init Router
	r := mux.NewRouter()

	// Router Handlers / Endpoints
	r.HandleFunc("/api/books", books.getBooks).Methods("GET")
	r.HandleFunc("/api/books/{id}", logger, books.getBook).Methods("GET")
	// r.HandleFunc("/api/books/{id}", Metrics(logger, books.getBook)).Methods("GET")

	srv := &http.Server{
		Handler:			r,
		Addr:				":8080",
		WriteTimeout:	15 * time.Second,
		ReadTimeout:	15 * time.Second,
	}

	log.Fatal(srv.ListenAndServe())
}
